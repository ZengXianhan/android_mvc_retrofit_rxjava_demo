package com.zengxh.greendao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zengxh.framework_demo.Model.Speaker;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SPEAKER".
*/
public class SpeakerDao extends AbstractDao<Speaker, Void> {

    public static final String TABLENAME = "SPEAKER";

    /**
     * Properties of entity Speaker.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property S_companay = new Property(0, String.class, "s_companay", false, "S_COMPANAY");
        public final static Property S_job = new Property(1, String.class, "s_job", false, "S_JOB");
        public final static Property UpdatedTime = new Property(2, String.class, "UpdatedTime", false, "UPDATED_TIME");
        public final static Property S_address = new Property(3, String.class, "s_address", false, "S_ADDRESS");
        public final static Property ClientID = new Property(4, String.class, "clientID", false, "CLIENT_ID");
        public final static Property S_mobile = new Property(5, String.class, "s_mobile", false, "S_MOBILE");
        public final static Property S_profilepic = new Property(6, String.class, "s_profilepic", false, "S_PROFILEPIC");
        public final static Property ID = new Property(7, String.class, "ID", false, "ID");
        public final static Property S_country = new Property(8, String.class, "s_country", false, "S_COUNTRY");
        public final static Property S_fullname = new Property(9, String.class, "s_fullname", false, "S_FULLNAME");
        public final static Property S_bio = new Property(10, String.class, "s_bio", false, "S_BIO");
        public final static Property S_email = new Property(11, String.class, "s_email", false, "S_EMAIL");
    }


    public SpeakerDao(DaoConfig config) {
        super(config);
    }
    
    public SpeakerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SPEAKER\" (" + //
                "\"S_COMPANAY\" TEXT," + // 0: s_companay
                "\"S_JOB\" TEXT," + // 1: s_job
                "\"UPDATED_TIME\" TEXT," + // 2: UpdatedTime
                "\"S_ADDRESS\" TEXT," + // 3: s_address
                "\"CLIENT_ID\" TEXT," + // 4: clientID
                "\"S_MOBILE\" TEXT," + // 5: s_mobile
                "\"S_PROFILEPIC\" TEXT," + // 6: s_profilepic
                "\"ID\" TEXT," + // 7: ID
                "\"S_COUNTRY\" TEXT," + // 8: s_country
                "\"S_FULLNAME\" TEXT," + // 9: s_fullname
                "\"S_BIO\" TEXT," + // 10: s_bio
                "\"S_EMAIL\" TEXT);"); // 11: s_email
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SPEAKER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Speaker entity) {
        stmt.clearBindings();
 
        String s_companay = entity.getS_companay();
        if (s_companay != null) {
            stmt.bindString(1, s_companay);
        }
 
        String s_job = entity.getS_job();
        if (s_job != null) {
            stmt.bindString(2, s_job);
        }
 
        String UpdatedTime = entity.getUpdatedTime();
        if (UpdatedTime != null) {
            stmt.bindString(3, UpdatedTime);
        }
 
        String s_address = entity.getS_address();
        if (s_address != null) {
            stmt.bindString(4, s_address);
        }
 
        String clientID = entity.getClientID();
        if (clientID != null) {
            stmt.bindString(5, clientID);
        }
 
        String s_mobile = entity.getS_mobile();
        if (s_mobile != null) {
            stmt.bindString(6, s_mobile);
        }
 
        String s_profilepic = entity.getS_profilepic();
        if (s_profilepic != null) {
            stmt.bindString(7, s_profilepic);
        }
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(8, ID);
        }
 
        String s_country = entity.getS_country();
        if (s_country != null) {
            stmt.bindString(9, s_country);
        }
 
        String s_fullname = entity.getS_fullname();
        if (s_fullname != null) {
            stmt.bindString(10, s_fullname);
        }
 
        String s_bio = entity.getS_bio();
        if (s_bio != null) {
            stmt.bindString(11, s_bio);
        }
 
        String s_email = entity.getS_email();
        if (s_email != null) {
            stmt.bindString(12, s_email);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Speaker entity) {
        stmt.clearBindings();
 
        String s_companay = entity.getS_companay();
        if (s_companay != null) {
            stmt.bindString(1, s_companay);
        }
 
        String s_job = entity.getS_job();
        if (s_job != null) {
            stmt.bindString(2, s_job);
        }
 
        String UpdatedTime = entity.getUpdatedTime();
        if (UpdatedTime != null) {
            stmt.bindString(3, UpdatedTime);
        }
 
        String s_address = entity.getS_address();
        if (s_address != null) {
            stmt.bindString(4, s_address);
        }
 
        String clientID = entity.getClientID();
        if (clientID != null) {
            stmt.bindString(5, clientID);
        }
 
        String s_mobile = entity.getS_mobile();
        if (s_mobile != null) {
            stmt.bindString(6, s_mobile);
        }
 
        String s_profilepic = entity.getS_profilepic();
        if (s_profilepic != null) {
            stmt.bindString(7, s_profilepic);
        }
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(8, ID);
        }
 
        String s_country = entity.getS_country();
        if (s_country != null) {
            stmt.bindString(9, s_country);
        }
 
        String s_fullname = entity.getS_fullname();
        if (s_fullname != null) {
            stmt.bindString(10, s_fullname);
        }
 
        String s_bio = entity.getS_bio();
        if (s_bio != null) {
            stmt.bindString(11, s_bio);
        }
 
        String s_email = entity.getS_email();
        if (s_email != null) {
            stmt.bindString(12, s_email);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Speaker readEntity(Cursor cursor, int offset) {
        Speaker entity = new Speaker( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // s_companay
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // s_job
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // UpdatedTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // s_address
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // clientID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // s_mobile
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // s_profilepic
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ID
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // s_country
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // s_fullname
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // s_bio
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // s_email
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Speaker entity, int offset) {
        entity.setS_companay(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setS_job(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUpdatedTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setS_address(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setClientID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setS_mobile(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setS_profilepic(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setID(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setS_country(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setS_fullname(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setS_bio(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setS_email(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Speaker entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Speaker entity) {
        return null;
    }

    @Override
    public boolean hasKey(Speaker entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
